7. BaseGeometry module
==========================

import module:
==============
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()


Test case #2: Checking for non interger types:
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] name must be greater than 0

    >>> try:
    ...     bg.integer_validator("float", 1.5)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] float must be greater than 0

Test case #3: Checking for boolean values:

    >>> try:
    ...     bg.integer_validator("bool", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] bool must be greater than 0


Test case 5#: Checking for only 1 argument to integer_validator:

    >>> try:
    ...     bg.integer_validator("integer")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test case #6: Checking for too many arguments:

    >>> try: 
    ...     bg.integer_validator("integer", 1, 2)
    ... except Exception as e:
    ...      print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() takes 3 positional arguments but 4 were given



Test case #5: Checking for 0 as a value:

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Test case #6: checking for cases with values less than 0:

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0
